/*
 * Dive EA REST API
 * Dive Experience Amplifier REST API provides a set of services which leverage obtaining catalog and TV grid info, contextual items (cards) information and saving and a static (scene by scene) version of the card carousel for linear TV and video on demand
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.touchvie.sdk.api;

import com.touchvie.sdk.ApiCallback;
import com.touchvie.sdk.ApiClient;
import com.touchvie.sdk.ApiException;
import com.touchvie.sdk.ApiResponse;
import com.touchvie.sdk.Configuration;
import com.touchvie.sdk.Pair;
import com.touchvie.sdk.ProgressRequestBody;
import com.touchvie.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.touchvie.sdk.model.AccessToken;
import com.touchvie.sdk.model.AuthError;
import com.touchvie.sdk.model.Card;
import com.touchvie.sdk.model.ChannelStatus;
import com.touchvie.sdk.model.MovieStatus;
import com.touchvie.sdk.model.TvGrid;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteLikes
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param cardId Requested card ID (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteLikesCall(String authorization, String cardId, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/likes/{card_id}"
            .replaceAll("\\{" + "card_id" + "\\}", apiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteLikesValidateBeforeCall(String authorization, String cardId, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteLikes(Async)");
        }
        
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling deleteLikes(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteLikesCall(authorization, cardId, acceptLanguage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete card like
     * Removes a card from current user&#39;s likes list
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param cardId Requested card ID (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteLikes(String authorization, String cardId, String acceptLanguage) throws ApiException {
        deleteLikesWithHttpInfo(authorization, cardId, acceptLanguage);
    }

    /**
     * Delete card like
     * Removes a card from current user&#39;s likes list
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param cardId Requested card ID (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteLikesWithHttpInfo(String authorization, String cardId, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = deleteLikesValidateBeforeCall(authorization, cardId, acceptLanguage, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete card like (asynchronously)
     * Removes a card from current user&#39;s likes list
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param cardId Requested card ID (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteLikesAsync(String authorization, String cardId, String acceptLanguage, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteLikesValidateBeforeCall(authorization, cardId, acceptLanguage, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getCard
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param cardId Unique identifier for this card (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param products Indicates if cards should contain commercial products when available (true) or not (false) (optional, default to true)
     * @param userData Indicates if cards should contain user data when available (true) or not (false) (optional, default to true)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCardCall(String authorization, String cardId, String acceptLanguage, Boolean products, Boolean userData, String imageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cards/{card_id}"
            .replaceAll("\\{" + "card_id" + "\\}", apiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (products != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "products", products));
        if (userData != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "user_data", userData));
        if (imageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "image_size", imageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCardValidateBeforeCall(String authorization, String cardId, String acceptLanguage, Boolean products, Boolean userData, String imageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getCard(Async)");
        }
        
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling getCard(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getCardCall(authorization, cardId, acceptLanguage, products, userData, imageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Full card detail
     * Retrieves a full card detail, with no relations or context
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param cardId Unique identifier for this card (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param products Indicates if cards should contain commercial products when available (true) or not (false) (optional, default to true)
     * @param userData Indicates if cards should contain user data when available (true) or not (false) (optional, default to true)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @return Card
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Card getCard(String authorization, String cardId, String acceptLanguage, Boolean products, Boolean userData, String imageSize) throws ApiException {
        ApiResponse<Card> resp = getCardWithHttpInfo(authorization, cardId, acceptLanguage, products, userData, imageSize);
        return resp.getData();
    }

    /**
     * Full card detail
     * Retrieves a full card detail, with no relations or context
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param cardId Unique identifier for this card (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param products Indicates if cards should contain commercial products when available (true) or not (false) (optional, default to true)
     * @param userData Indicates if cards should contain user data when available (true) or not (false) (optional, default to true)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @return ApiResponse&lt;Card&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Card> getCardWithHttpInfo(String authorization, String cardId, String acceptLanguage, Boolean products, Boolean userData, String imageSize) throws ApiException {
        com.squareup.okhttp.Call call = getCardValidateBeforeCall(authorization, cardId, acceptLanguage, products, userData, imageSize, null, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Full card detail (asynchronously)
     * Retrieves a full card detail, with no relations or context
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param cardId Unique identifier for this card (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param products Indicates if cards should contain commercial products when available (true) or not (false) (optional, default to true)
     * @param userData Indicates if cards should contain user data when available (true) or not (false) (optional, default to true)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCardAsync(String authorization, String cardId, String acceptLanguage, Boolean products, Boolean userData, String imageSize, final ApiCallback<Card> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCardValidateBeforeCall(authorization, cardId, acceptLanguage, products, userData, imageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCardVersion
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param cardId Unique identifier for this card (required)
     * @param version Version identifier, indicates the context where the card is being requested (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param products Indicates if cards should contain commercial products when available (true) or not (false) (optional, default to true)
     * @param userData Indicates if cards should contain user data when available (true) or not (false) (optional, default to true)
     * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false) (optional, default to true)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCardVersionCall(String authorization, String cardId, String version, String acceptLanguage, Boolean products, Boolean userData, Boolean relations, String imageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/cards/{card_id}/versions/{version}"
            .replaceAll("\\{" + "card_id" + "\\}", apiClient.escapeString(cardId.toString()))
            .replaceAll("\\{" + "version" + "\\}", apiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (products != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "products", products));
        if (userData != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "user_data", userData));
        if (relations != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "relations", relations));
        if (imageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "image_size", imageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCardVersionValidateBeforeCall(String authorization, String cardId, String version, String acceptLanguage, Boolean products, Boolean userData, Boolean relations, String imageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getCardVersion(Async)");
        }
        
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling getCardVersion(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getCardVersion(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getCardVersionCall(authorization, cardId, version, acceptLanguage, products, userData, relations, imageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Full card detail with version
     * Retrieves a full card detail, and its relations to other cards in a given context (card version)
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param cardId Unique identifier for this card (required)
     * @param version Version identifier, indicates the context where the card is being requested (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param products Indicates if cards should contain commercial products when available (true) or not (false) (optional, default to true)
     * @param userData Indicates if cards should contain user data when available (true) or not (false) (optional, default to true)
     * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false) (optional, default to true)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @return Card
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Card getCardVersion(String authorization, String cardId, String version, String acceptLanguage, Boolean products, Boolean userData, Boolean relations, String imageSize) throws ApiException {
        ApiResponse<Card> resp = getCardVersionWithHttpInfo(authorization, cardId, version, acceptLanguage, products, userData, relations, imageSize);
        return resp.getData();
    }

    /**
     * Full card detail with version
     * Retrieves a full card detail, and its relations to other cards in a given context (card version)
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param cardId Unique identifier for this card (required)
     * @param version Version identifier, indicates the context where the card is being requested (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param products Indicates if cards should contain commercial products when available (true) or not (false) (optional, default to true)
     * @param userData Indicates if cards should contain user data when available (true) or not (false) (optional, default to true)
     * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false) (optional, default to true)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @return ApiResponse&lt;Card&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Card> getCardVersionWithHttpInfo(String authorization, String cardId, String version, String acceptLanguage, Boolean products, Boolean userData, Boolean relations, String imageSize) throws ApiException {
        com.squareup.okhttp.Call call = getCardVersionValidateBeforeCall(authorization, cardId, version, acceptLanguage, products, userData, relations, imageSize, null, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Full card detail with version (asynchronously)
     * Retrieves a full card detail, and its relations to other cards in a given context (card version)
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param cardId Unique identifier for this card (required)
     * @param version Version identifier, indicates the context where the card is being requested (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param products Indicates if cards should contain commercial products when available (true) or not (false) (optional, default to true)
     * @param userData Indicates if cards should contain user data when available (true) or not (false) (optional, default to true)
     * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false) (optional, default to true)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCardVersionAsync(String authorization, String cardId, String version, String acceptLanguage, Boolean products, Boolean userData, Boolean relations, String imageSize, final ApiCallback<Card> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCardVersionValidateBeforeCall(authorization, cardId, version, acceptLanguage, products, userData, relations, imageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCatalogMovie
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param clientMovieId Client movie ID being played (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCatalogMovieCall(String authorization, String clientMovieId, String acceptLanguage, String imageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/movies/{client_movie_id}"
            .replaceAll("\\{" + "client_movie_id" + "\\}", apiClient.escapeString(clientMovieId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (imageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "image_size", imageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCatalogMovieValidateBeforeCall(String authorization, String clientMovieId, String acceptLanguage, String imageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getCatalogMovie(Async)");
        }
        
        // verify the required parameter 'clientMovieId' is set
        if (clientMovieId == null) {
            throw new ApiException("Missing the required parameter 'clientMovieId' when calling getCatalogMovie(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getCatalogMovieCall(authorization, clientMovieId, acceptLanguage, imageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Movie catalog info
     * Retrieves a movie&#39;s full card by its client ID, including catalog and cast information
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param clientMovieId Client movie ID being played (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @return Card
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Card getCatalogMovie(String authorization, String clientMovieId, String acceptLanguage, String imageSize) throws ApiException {
        ApiResponse<Card> resp = getCatalogMovieWithHttpInfo(authorization, clientMovieId, acceptLanguage, imageSize);
        return resp.getData();
    }

    /**
     * Movie catalog info
     * Retrieves a movie&#39;s full card by its client ID, including catalog and cast information
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param clientMovieId Client movie ID being played (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @return ApiResponse&lt;Card&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Card> getCatalogMovieWithHttpInfo(String authorization, String clientMovieId, String acceptLanguage, String imageSize) throws ApiException {
        com.squareup.okhttp.Call call = getCatalogMovieValidateBeforeCall(authorization, clientMovieId, acceptLanguage, imageSize, null, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Movie catalog info (asynchronously)
     * Retrieves a movie&#39;s full card by its client ID, including catalog and cast information
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param clientMovieId Client movie ID being played (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCatalogMovieAsync(String authorization, String clientMovieId, String acceptLanguage, String imageSize, final ApiCallback<Card> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCatalogMovieValidateBeforeCall(authorization, clientMovieId, acceptLanguage, imageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChannelGrid
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param channelId Client channel ID (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChannelGridCall(String authorization, String channelId, String acceptLanguage, String imageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/channels/{channel_id}/grid"
            .replaceAll("\\{" + "channel_id" + "\\}", apiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (imageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "image_size", imageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelGridValidateBeforeCall(String authorization, String channelId, String acceptLanguage, String imageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getChannelGrid(Async)");
        }
        
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelGrid(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getChannelGridCall(authorization, channelId, acceptLanguage, imageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Channel events grid
     * Returns the current and upcoming grid of TV events for the given channel
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param channelId Client channel ID (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @return TvGrid
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TvGrid getChannelGrid(String authorization, String channelId, String acceptLanguage, String imageSize) throws ApiException {
        ApiResponse<TvGrid> resp = getChannelGridWithHttpInfo(authorization, channelId, acceptLanguage, imageSize);
        return resp.getData();
    }

    /**
     * Channel events grid
     * Returns the current and upcoming grid of TV events for the given channel
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param channelId Client channel ID (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @return ApiResponse&lt;TvGrid&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TvGrid> getChannelGridWithHttpInfo(String authorization, String channelId, String acceptLanguage, String imageSize) throws ApiException {
        com.squareup.okhttp.Call call = getChannelGridValidateBeforeCall(authorization, channelId, acceptLanguage, imageSize, null, null);
        Type localVarReturnType = new TypeToken<TvGrid>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Channel events grid (asynchronously)
     * Returns the current and upcoming grid of TV events for the given channel
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param channelId Client channel ID (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelGridAsync(String authorization, String channelId, String acceptLanguage, String imageSize, final ApiCallback<TvGrid> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelGridValidateBeforeCall(authorization, channelId, acceptLanguage, imageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TvGrid>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getChannelMovie
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param channelId Client channel ID (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getChannelMovieCall(String authorization, String channelId, String acceptLanguage, String imageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/channels/{channel_id}"
            .replaceAll("\\{" + "channel_id" + "\\}", apiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (imageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "image_size", imageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getChannelMovieValidateBeforeCall(String authorization, String channelId, String acceptLanguage, String imageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getChannelMovie(Async)");
        }
        
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannelMovie(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getChannelMovieCall(authorization, channelId, acceptLanguage, imageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Channel movie catalog info
     * Retrieves full card detail, including catalog and cast information, for the content currently being broadcasted on the channel
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param channelId Client channel ID (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @return Card
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Card getChannelMovie(String authorization, String channelId, String acceptLanguage, String imageSize) throws ApiException {
        ApiResponse<Card> resp = getChannelMovieWithHttpInfo(authorization, channelId, acceptLanguage, imageSize);
        return resp.getData();
    }

    /**
     * Channel movie catalog info
     * Retrieves full card detail, including catalog and cast information, for the content currently being broadcasted on the channel
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param channelId Client channel ID (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @return ApiResponse&lt;Card&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Card> getChannelMovieWithHttpInfo(String authorization, String channelId, String acceptLanguage, String imageSize) throws ApiException {
        com.squareup.okhttp.Call call = getChannelMovieValidateBeforeCall(authorization, channelId, acceptLanguage, imageSize, null, null);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Channel movie catalog info (asynchronously)
     * Retrieves full card detail, including catalog and cast information, for the content currently being broadcasted on the channel
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param channelId Client channel ID (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getChannelMovieAsync(String authorization, String channelId, String acceptLanguage, String imageSize, final ApiCallback<Card> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getChannelMovieValidateBeforeCall(authorization, channelId, acceptLanguage, imageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Card>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getLikes
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @param paginateKey Paginate key (optional)
     * @param size Number of desired results (optional, default to 20)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getLikesCall(String authorization, String acceptLanguage, String imageSize, String paginateKey, String size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/likes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (imageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "image_size", imageSize));
        if (paginateKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "paginate_key", paginateKey));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "size", size));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getLikesValidateBeforeCall(String authorization, String acceptLanguage, String imageSize, String paginateKey, String size, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getLikes(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getLikesCall(authorization, acceptLanguage, imageSize, paginateKey, size, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get card likes
     * Returns a paginated list of cards liked by current user
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @param paginateKey Paginate key (optional)
     * @param size Number of desired results (optional, default to 20)
     * @return List&lt;Card&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Card> getLikes(String authorization, String acceptLanguage, String imageSize, String paginateKey, String size) throws ApiException {
        ApiResponse<List<Card>> resp = getLikesWithHttpInfo(authorization, acceptLanguage, imageSize, paginateKey, size);
        return resp.getData();
    }

    /**
     * Get card likes
     * Returns a paginated list of cards liked by current user
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @param paginateKey Paginate key (optional)
     * @param size Number of desired results (optional, default to 20)
     * @return ApiResponse&lt;List&lt;Card&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Card>> getLikesWithHttpInfo(String authorization, String acceptLanguage, String imageSize, String paginateKey, String size) throws ApiException {
        com.squareup.okhttp.Call call = getLikesValidateBeforeCall(authorization, acceptLanguage, imageSize, paginateKey, size, null, null);
        Type localVarReturnType = new TypeToken<List<Card>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get card likes (asynchronously)
     * Returns a paginated list of cards liked by current user
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @param paginateKey Paginate key (optional)
     * @param size Number of desired results (optional, default to 20)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getLikesAsync(String authorization, String acceptLanguage, String imageSize, String paginateKey, String size, final ApiCallback<List<Card>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getLikesValidateBeforeCall(authorization, acceptLanguage, imageSize, paginateKey, size, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Card>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReadyChannels
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param channelIdList List of client channel IDs as a comma separated list (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReadyChannelsCall(String authorization, List<String> channelIdList, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/channels/{channel_id_list}/ready"
            .replaceAll("\\{" + "channel_id_list" + "\\}", apiClient.escapeString(channelIdList.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReadyChannelsValidateBeforeCall(String authorization, List<String> channelIdList, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getReadyChannels(Async)");
        }
        
        // verify the required parameter 'channelIdList' is set
        if (channelIdList == null) {
            throw new ApiException("Missing the required parameter 'channelIdList' when calling getReadyChannels(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getReadyChannelsCall(authorization, channelIdList, acceptLanguage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Channel sync availability
     * Checks if a list of client channel identifiers are currently broadcasting synchronizable content
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param channelIdList List of client channel IDs as a comma separated list (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @return List&lt;ChannelStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ChannelStatus> getReadyChannels(String authorization, List<String> channelIdList, String acceptLanguage) throws ApiException {
        ApiResponse<List<ChannelStatus>> resp = getReadyChannelsWithHttpInfo(authorization, channelIdList, acceptLanguage);
        return resp.getData();
    }

    /**
     * Channel sync availability
     * Checks if a list of client channel identifiers are currently broadcasting synchronizable content
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param channelIdList List of client channel IDs as a comma separated list (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @return ApiResponse&lt;List&lt;ChannelStatus&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ChannelStatus>> getReadyChannelsWithHttpInfo(String authorization, List<String> channelIdList, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = getReadyChannelsValidateBeforeCall(authorization, channelIdList, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<List<ChannelStatus>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Channel sync availability (asynchronously)
     * Checks if a list of client channel identifiers are currently broadcasting synchronizable content
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param channelIdList List of client channel IDs as a comma separated list (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReadyChannelsAsync(String authorization, List<String> channelIdList, String acceptLanguage, final ApiCallback<List<ChannelStatus>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReadyChannelsValidateBeforeCall(authorization, channelIdList, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ChannelStatus>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReadyMovies
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param clientMovieIdList List of client movie IDs, provided as a comma separated list (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReadyMoviesCall(String authorization, List<String> clientMovieIdList, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/movies/{client_movie_id_list}/ready"
            .replaceAll("\\{" + "client_movie_id_list" + "\\}", apiClient.escapeString(clientMovieIdList.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReadyMoviesValidateBeforeCall(String authorization, List<String> clientMovieIdList, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getReadyMovies(Async)");
        }
        
        // verify the required parameter 'clientMovieIdList' is set
        if (clientMovieIdList == null) {
            throw new ApiException("Missing the required parameter 'clientMovieIdList' when calling getReadyMovies(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getReadyMoviesCall(authorization, clientMovieIdList, acceptLanguage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Movie sync availability
     * Checks whether a list of client movie identifiers (Video On Demand) are available to be synchronized using the Dive API
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param clientMovieIdList List of client movie IDs, provided as a comma separated list (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @return List&lt;MovieStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<MovieStatus> getReadyMovies(String authorization, List<String> clientMovieIdList, String acceptLanguage) throws ApiException {
        ApiResponse<List<MovieStatus>> resp = getReadyMoviesWithHttpInfo(authorization, clientMovieIdList, acceptLanguage);
        return resp.getData();
    }

    /**
     * Movie sync availability
     * Checks whether a list of client movie identifiers (Video On Demand) are available to be synchronized using the Dive API
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param clientMovieIdList List of client movie IDs, provided as a comma separated list (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @return ApiResponse&lt;List&lt;MovieStatus&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<MovieStatus>> getReadyMoviesWithHttpInfo(String authorization, List<String> clientMovieIdList, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = getReadyMoviesValidateBeforeCall(authorization, clientMovieIdList, acceptLanguage, null, null);
        Type localVarReturnType = new TypeToken<List<MovieStatus>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Movie sync availability (asynchronously)
     * Checks whether a list of client movie identifiers (Video On Demand) are available to be synchronized using the Dive API
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param clientMovieIdList List of client movie IDs, provided as a comma separated list (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReadyMoviesAsync(String authorization, List<String> clientMovieIdList, String acceptLanguage, final ApiCallback<List<MovieStatus>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReadyMoviesValidateBeforeCall(authorization, clientMovieIdList, acceptLanguage, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<MovieStatus>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStaticChannelScene
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param channelId Client channel ID (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false) (optional, default to true)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStaticChannelSceneCall(String authorization, String channelId, String acceptLanguage, Boolean relations, String imageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/channels/{channel_id}/static"
            .replaceAll("\\{" + "channel_id" + "\\}", apiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (relations != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "relations", relations));
        if (imageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "image_size", imageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStaticChannelSceneValidateBeforeCall(String authorization, String channelId, String acceptLanguage, Boolean relations, String imageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getStaticChannelScene(Async)");
        }
        
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getStaticChannelScene(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStaticChannelSceneCall(authorization, channelId, acceptLanguage, relations, imageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Static channel scene
     * Retrieves the list of cards related to the content currently being broadcasted in the provided channel
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param channelId Client channel ID (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false) (optional, default to true)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @return List&lt;Card&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Card> getStaticChannelScene(String authorization, String channelId, String acceptLanguage, Boolean relations, String imageSize) throws ApiException {
        ApiResponse<List<Card>> resp = getStaticChannelSceneWithHttpInfo(authorization, channelId, acceptLanguage, relations, imageSize);
        return resp.getData();
    }

    /**
     * Static channel scene
     * Retrieves the list of cards related to the content currently being broadcasted in the provided channel
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param channelId Client channel ID (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false) (optional, default to true)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @return ApiResponse&lt;List&lt;Card&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Card>> getStaticChannelSceneWithHttpInfo(String authorization, String channelId, String acceptLanguage, Boolean relations, String imageSize) throws ApiException {
        com.squareup.okhttp.Call call = getStaticChannelSceneValidateBeforeCall(authorization, channelId, acceptLanguage, relations, imageSize, null, null);
        Type localVarReturnType = new TypeToken<List<Card>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Static channel scene (asynchronously)
     * Retrieves the list of cards related to the content currently being broadcasted in the provided channel
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param channelId Client channel ID (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false) (optional, default to true)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStaticChannelSceneAsync(String authorization, String channelId, String acceptLanguage, Boolean relations, String imageSize, final ApiCallback<List<Card>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStaticChannelSceneValidateBeforeCall(authorization, channelId, acceptLanguage, relations, imageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Card>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getStaticMovieScene
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param clientMovieId Client movie ID being played (required)
     * @param timestamp Current movie timestamp in seconds (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false) (optional, default to true)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getStaticMovieSceneCall(String authorization, String clientMovieId, Float timestamp, String acceptLanguage, Boolean relations, String imageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/movies/{client_movie_id}/static/{timestamp}"
            .replaceAll("\\{" + "client_movie_id" + "\\}", apiClient.escapeString(clientMovieId.toString()))
            .replaceAll("\\{" + "timestamp" + "\\}", apiClient.escapeString(timestamp.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (relations != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "relations", relations));
        if (imageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "image_size", imageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getStaticMovieSceneValidateBeforeCall(String authorization, String clientMovieId, Float timestamp, String acceptLanguage, Boolean relations, String imageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getStaticMovieScene(Async)");
        }
        
        // verify the required parameter 'clientMovieId' is set
        if (clientMovieId == null) {
            throw new ApiException("Missing the required parameter 'clientMovieId' when calling getStaticMovieScene(Async)");
        }
        
        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling getStaticMovieScene(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getStaticMovieSceneCall(authorization, clientMovieId, timestamp, acceptLanguage, relations, imageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Static VOD scene
     * Retrieves the current list of cards related to the given movie scene
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param clientMovieId Client movie ID being played (required)
     * @param timestamp Current movie timestamp in seconds (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false) (optional, default to true)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @return List&lt;Card&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Card> getStaticMovieScene(String authorization, String clientMovieId, Float timestamp, String acceptLanguage, Boolean relations, String imageSize) throws ApiException {
        ApiResponse<List<Card>> resp = getStaticMovieSceneWithHttpInfo(authorization, clientMovieId, timestamp, acceptLanguage, relations, imageSize);
        return resp.getData();
    }

    /**
     * Static VOD scene
     * Retrieves the current list of cards related to the given movie scene
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param clientMovieId Client movie ID being played (required)
     * @param timestamp Current movie timestamp in seconds (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false) (optional, default to true)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @return ApiResponse&lt;List&lt;Card&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Card>> getStaticMovieSceneWithHttpInfo(String authorization, String clientMovieId, Float timestamp, String acceptLanguage, Boolean relations, String imageSize) throws ApiException {
        com.squareup.okhttp.Call call = getStaticMovieSceneValidateBeforeCall(authorization, clientMovieId, timestamp, acceptLanguage, relations, imageSize, null, null);
        Type localVarReturnType = new TypeToken<List<Card>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Static VOD scene (asynchronously)
     * Retrieves the current list of cards related to the given movie scene
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param clientMovieId Client movie ID being played (required)
     * @param timestamp Current movie timestamp in seconds (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param relations Indicates if cards should contain the scene hierarchy (true) or not (false) (optional, default to true)
     * @param imageSize Size of the images returned in the response (optional, default to m)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getStaticMovieSceneAsync(String authorization, String clientMovieId, Float timestamp, String acceptLanguage, Boolean relations, String imageSize, final ApiCallback<List<Card>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getStaticMovieSceneValidateBeforeCall(authorization, clientMovieId, timestamp, acceptLanguage, relations, imageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Card>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postLikes
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param cardId Requested card ID (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postLikesCall(String authorization, String cardId, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/likes/{card_id}"
            .replaceAll("\\{" + "card_id" + "\\}", apiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postLikesValidateBeforeCall(String authorization, String cardId, String acceptLanguage, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling postLikes(Async)");
        }
        
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling postLikes(Async)");
        }
        
        
        com.squareup.okhttp.Call call = postLikesCall(authorization, cardId, acceptLanguage, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add card like
     * Stores a card under current user&#39;s likes list
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param cardId Requested card ID (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postLikes(String authorization, String cardId, String acceptLanguage) throws ApiException {
        postLikesWithHttpInfo(authorization, cardId, acceptLanguage);
    }

    /**
     * Add card like
     * Stores a card under current user&#39;s likes list
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param cardId Requested card ID (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postLikesWithHttpInfo(String authorization, String cardId, String acceptLanguage) throws ApiException {
        com.squareup.okhttp.Call call = postLikesValidateBeforeCall(authorization, cardId, acceptLanguage, null, null);
        return apiClient.execute(call);
    }

    /**
     * Add card like (asynchronously)
     * Stores a card under current user&#39;s likes list
     * @param authorization Authorization token (&#39;Bearer &lt;token&gt;&#39;) (required)
     * @param cardId Requested card ID (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postLikesAsync(String authorization, String cardId, String acceptLanguage, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postLikesValidateBeforeCall(authorization, cardId, acceptLanguage, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for postToken
     * @param authorization Basic authorization token (&#39;Basic &lt;client_key&gt;&#39;) (required)
     * @param grantType Grant type used to obtain the token. (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param deviceId Device identifier, must uniquely identify the user or device accessing the API. Required only for \&quot;device_credentials\&quot; grant type (optional)
     * @param refreshToken Refresh token, used to issue a new token without resending client credentials. Required only for \&quot;refresh_token\&quot; grant type (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postTokenCall(String authorization, String grantType, String acceptLanguage, String deviceId, String refreshToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (grantType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "grant_type", grantType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null)
        localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        if (acceptLanguage != null)
        localVarHeaderParams.put("Accept-Language", apiClient.parameterToString(acceptLanguage));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (deviceId != null)
        localVarFormParams.put("device_id", deviceId);
        if (refreshToken != null)
        localVarFormParams.put("refresh_token", refreshToken);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postTokenValidateBeforeCall(String authorization, String grantType, String acceptLanguage, String deviceId, String refreshToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling postToken(Async)");
        }
        
        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling postToken(Async)");
        }
        
        
        com.squareup.okhttp.Call call = postTokenCall(authorization, grantType, acceptLanguage, deviceId, refreshToken, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Token endpoint
     * The token endpoint is used to obtain access tokens which allow clients to make API requests
     * @param authorization Basic authorization token (&#39;Basic &lt;client_key&gt;&#39;) (required)
     * @param grantType Grant type used to obtain the token. (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param deviceId Device identifier, must uniquely identify the user or device accessing the API. Required only for \&quot;device_credentials\&quot; grant type (optional)
     * @param refreshToken Refresh token, used to issue a new token without resending client credentials. Required only for \&quot;refresh_token\&quot; grant type (optional)
     * @return AccessToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccessToken postToken(String authorization, String grantType, String acceptLanguage, String deviceId, String refreshToken) throws ApiException {
        ApiResponse<AccessToken> resp = postTokenWithHttpInfo(authorization, grantType, acceptLanguage, deviceId, refreshToken);
        return resp.getData();
    }

    /**
     * Token endpoint
     * The token endpoint is used to obtain access tokens which allow clients to make API requests
     * @param authorization Basic authorization token (&#39;Basic &lt;client_key&gt;&#39;) (required)
     * @param grantType Grant type used to obtain the token. (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param deviceId Device identifier, must uniquely identify the user or device accessing the API. Required only for \&quot;device_credentials\&quot; grant type (optional)
     * @param refreshToken Refresh token, used to issue a new token without resending client credentials. Required only for \&quot;refresh_token\&quot; grant type (optional)
     * @return ApiResponse&lt;AccessToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccessToken> postTokenWithHttpInfo(String authorization, String grantType, String acceptLanguage, String deviceId, String refreshToken) throws ApiException {
        com.squareup.okhttp.Call call = postTokenValidateBeforeCall(authorization, grantType, acceptLanguage, deviceId, refreshToken, null, null);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Token endpoint (asynchronously)
     * The token endpoint is used to obtain access tokens which allow clients to make API requests
     * @param authorization Basic authorization token (&#39;Basic &lt;client_key&gt;&#39;) (required)
     * @param grantType Grant type used to obtain the token. (required)
     * @param acceptLanguage Client locale, as language-country (optional)
     * @param deviceId Device identifier, must uniquely identify the user or device accessing the API. Required only for \&quot;device_credentials\&quot; grant type (optional)
     * @param refreshToken Refresh token, used to issue a new token without resending client credentials. Required only for \&quot;refresh_token\&quot; grant type (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTokenAsync(String authorization, String grantType, String acceptLanguage, String deviceId, String refreshToken, final ApiCallback<AccessToken> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTokenValidateBeforeCall(authorization, grantType, acceptLanguage, deviceId, refreshToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccessToken>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
