/*
 * Dive EA REST API
 * Dive Experience Amplifier REST API provides a set of services which leverage obtaining catalog and TV grid info, contextual items (cards) information and saving and a static (scene by scene) version of the card carousel for linear TV and video on demand
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.touchvie.sdk.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.touchvie.sdk.model.CatalogSync;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;

/**
 * CatalogData
 */

public class CatalogData implements Serializable {
  private static final long serialVersionUID = 1L;

  @SerializedName("background_image")
  private String backgroundImage = null;

  @SerializedName("director")
  private String director = null;

  @SerializedName("genres")
  private List<String> genres = new ArrayList<String>();

  @SerializedName("original_title")
  private String originalTitle = null;

  @SerializedName("runtime")
  private Integer runtime = null;

  @SerializedName("year")
  private Integer year = null;

  @SerializedName("chapter_index")
  private Integer chapterIndex = null;

  @SerializedName("season_index")
  private Integer seasonIndex = null;

  @SerializedName("sync")
  private CatalogSync sync = null;

  public CatalogData backgroundImage(String backgroundImage) {
    this.backgroundImage = backgroundImage;
    return this;
  }

   /**
   * URL of an additional background image for this catalog element
   * @return backgroundImage
  **/
  @ApiModelProperty(value = "URL of an additional background image for this catalog element")
  public String getBackgroundImage() {
    return backgroundImage;
  }

  public void setBackgroundImage(String backgroundImage) {
    this.backgroundImage = backgroundImage;
  }

  public CatalogData director(String director) {
    this.director = director;
    return this;
  }

   /**
   * Name of the director
   * @return director
  **/
  @ApiModelProperty(required = true, value = "Name of the director")
  public String getDirector() {
    return director;
  }

  public void setDirector(String director) {
    this.director = director;
  }

  public CatalogData genres(List<String> genres) {
    this.genres = genres;
    return this;
  }

  public CatalogData addGenresItem(String genresItem) {
    this.genres.add(genresItem);
    return this;
  }

   /**
   * List of genres of this catalog entry
   * @return genres
  **/
  @ApiModelProperty(required = true, value = "List of genres of this catalog entry")
  public List<String> getGenres() {
    return genres;
  }

  public void setGenres(List<String> genres) {
    this.genres = genres;
  }

  public CatalogData originalTitle(String originalTitle) {
    this.originalTitle = originalTitle;
    return this;
  }

   /**
   * Original language title
   * @return originalTitle
  **/
  @ApiModelProperty(required = true, value = "Original language title")
  public String getOriginalTitle() {
    return originalTitle;
  }

  public void setOriginalTitle(String originalTitle) {
    this.originalTitle = originalTitle;
  }

  public CatalogData runtime(Integer runtime) {
    this.runtime = runtime;
    return this;
  }

   /**
   * Length of the movie or chapter, or average length of serie chapters, in minutes
   * @return runtime
  **/
  @ApiModelProperty(required = true, value = "Length of the movie or chapter, or average length of serie chapters, in minutes")
  public Integer getRuntime() {
    return runtime;
  }

  public void setRuntime(Integer runtime) {
    this.runtime = runtime;
  }

  public CatalogData year(Integer year) {
    this.year = year;
    return this;
  }

   /**
   * Year of production
   * @return year
  **/
  @ApiModelProperty(required = true, value = "Year of production")
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }

  public CatalogData chapterIndex(Integer chapterIndex) {
    this.chapterIndex = chapterIndex;
    return this;
  }

   /**
   * Index of the chapter inside its season (only for content_type&#x3D;chapter)
   * @return chapterIndex
  **/
  @ApiModelProperty(value = "Index of the chapter inside its season (only for content_type=chapter)")
  public Integer getChapterIndex() {
    return chapterIndex;
  }

  public void setChapterIndex(Integer chapterIndex) {
    this.chapterIndex = chapterIndex;
  }

  public CatalogData seasonIndex(Integer seasonIndex) {
    this.seasonIndex = seasonIndex;
    return this;
  }

   /**
   * Index of the season where the chapter belongs (only for content_type&#x3D;chapter)
   * @return seasonIndex
  **/
  @ApiModelProperty(value = "Index of the season where the chapter belongs (only for content_type=chapter)")
  public Integer getSeasonIndex() {
    return seasonIndex;
  }

  public void setSeasonIndex(Integer seasonIndex) {
    this.seasonIndex = seasonIndex;
  }

  public CatalogData sync(CatalogSync sync) {
    this.sync = sync;
    return this;
  }

   /**
   * Get sync
   * @return sync
  **/
  @ApiModelProperty(value = "")
  public CatalogSync getSync() {
    return sync;
  }

  public void setSync(CatalogSync sync) {
    this.sync = sync;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CatalogData catalogData = (CatalogData) o;
    return Objects.equals(this.backgroundImage, catalogData.backgroundImage) &&
        Objects.equals(this.director, catalogData.director) &&
        Objects.equals(this.genres, catalogData.genres) &&
        Objects.equals(this.originalTitle, catalogData.originalTitle) &&
        Objects.equals(this.runtime, catalogData.runtime) &&
        Objects.equals(this.year, catalogData.year) &&
        Objects.equals(this.chapterIndex, catalogData.chapterIndex) &&
        Objects.equals(this.seasonIndex, catalogData.seasonIndex) &&
        Objects.equals(this.sync, catalogData.sync);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundImage, director, genres, originalTitle, runtime, year, chapterIndex, seasonIndex, sync);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CatalogData {\n");
    
    sb.append("    backgroundImage: ").append(toIndentedString(backgroundImage)).append("\n");
    sb.append("    director: ").append(toIndentedString(director)).append("\n");
    sb.append("    genres: ").append(toIndentedString(genres)).append("\n");
    sb.append("    originalTitle: ").append(toIndentedString(originalTitle)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("    chapterIndex: ").append(toIndentedString(chapterIndex)).append("\n");
    sb.append("    seasonIndex: ").append(toIndentedString(seasonIndex)).append("\n");
    sb.append("    sync: ").append(toIndentedString(sync)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

